{"version":3,"sources":["Projects.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Projects","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","inherits","createClass","key","value","_this2","d3","then","setState","react_default","a","createElement","className","map","ele","i","reactstrap_es","href","link","name","description","Component","Homepage","Fragment","About","App","HashRouter","Link","to","Route","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fcdb979.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { Card, CardBody, CardTitle, CardText } from 'reactstrap';\n\nexport class Projects extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: []\n        }\n    }\n\n    componentDidMount() {\n        d3.csv('data/projects.csv').then((data) => {\n            this.setState({ data: data });\n        });\n    }\n\n    render() {\n        return (<div className=\"container mb-5 p-5\">\n        <h1 className=\"mb-5\">PROJECTS:</h1>\n            {this.state.data.map((ele, i) => {\n                return <Card key={i}>\n                    <CardBody>\n                        <CardTitle><a href={ele.link}>{ele.name}</a></CardTitle>\n                        <CardText>{ele.description}</CardText>\n                    </CardBody>\n                </Card>\n            })}\n        </div>)\n    }\n}","import React, { Component } from \"react\";\n\nclass Homepage extends Component {\n    render() {\n        return (\n            <>\n                <h1>Welcome to my Website!</h1>\n                <p>This is an assignment that shows I know how to use React-Router!</p>\n                <p>Press on the links above to view more information about me.</p>\n            </>\n        )\n    }\n}\n\nexport default Homepage;","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Projects } from \"./Projects\";\nimport Homepage from \"./Homepage\";\n\nclass App extends Component {\n  render() {\n    return (<div>\n      <Router>\n        <>\n          <nav>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/about\">About</Link>\n            <Link to=\"/projects\">Projects</Link>\n          </nav>\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/projects\" component={Projects} />\n          <Route exact path=\"/\" component={Homepage} />\n        </>\n      </Router>\n    </div>\n    );\n  }\n}\n\nfunction About() {\n  return <>\n  <h1 className=\"mb-5\"><em>ABOUT ME:</em></h1>\n  <ul className=\"list\">\n    <li>I like web development and am enjoying this course, but it can be quite time consuming</li>\n    <li>I am a senior in Electrical Engineering here at UW and am excited to graduate</li>\n    <li>I <strong>really</strong> want to learn more server side development after this course</li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li>That is all</li>\n  </ul>\n  </>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}